/**
 * Auto-generated migration index
 * Generated at: 2025-08-09T07:20:05.909Z
 * 
 * This file is automatically generated from classification.json
 * To update this file, modify classification.json and run:
 * node .claude/data-classify/scripts/generate-migration.js
 * 
 * === AUTO-GENERATED CONTENT START ===
 */

import { ElectronStoreMigrator } from './electronStoreToPreferences'
import { ReduxMigrator } from './reduxToPreferences'
import { loggerService } from '@logger'

const logger = loggerService.withContext('MigrationManager')

export interface MigrationResult {
  success: boolean
  migratedCount: number
  errors: Array<{
    key: string
    error: string
  }>
  source: 'electronStore' | 'redux'
}

export interface MigrationSummary {
  totalItems: number
  successCount: number
  errorCount: number
  electronStore: MigrationResult
  redux: MigrationResult
}

export class MigrationManager {
  private electronStoreMigrator: ElectronStoreMigrator
  private reduxMigrator: ReduxMigrator

  constructor() {
    this.electronStoreMigrator = new ElectronStoreMigrator()
    this.reduxMigrator = new ReduxMigrator()
  }

  /**
   * 执行完整的preferences迁移
   * @returns 迁移摘要
   */
  async migrateAllPreferences(): Promise<MigrationSummary> {
    logger.info('开始完整preferences迁移')
    
    try {
      // 并行执行两个迁移器
      const [electronStoreResult, reduxResult] = await Promise.all([
        this.electronStoreMigrator.migrate(),
        this.reduxMigrator.migrate()
      ])

      const summary: MigrationSummary = {
        totalItems: 158,
        successCount: electronStoreResult.migratedCount + reduxResult.migratedCount,
        errorCount: electronStoreResult.errors.length + reduxResult.errors.length,
        electronStore: electronStoreResult,
        redux: reduxResult
      }

      if (summary.errorCount > 0) {
        logger.warn('迁移完成但有错误', { summary })
      } else {
        logger.info('迁移完全成功', { summary })
      }

      return summary
    } catch (error) {
      logger.error('迁移过程中发生致命错误', error)
      throw error
    }
  }

  /**
   * 验证迁移结果
   * @param summary 迁移摘要
   * @returns 是否验证成功
   */
  async validateMigration(summary: MigrationSummary): Promise<boolean> {
    logger.info('开始验证迁移结果')

    // 基本验证：检查成功率
    const successRate = summary.successCount / summary.totalItems
    if (successRate < 0.95) { // 要求95%以上成功率
      logger.error('迁移成功率过低', { successRate, summary })
      return false
    }

    // 验证关键配置项是否存在
    const criticalKeys = [
      'app.theme.mode',
      'app.language',
      'app.user.id',
      'feature.quick_assistant.enabled',
      'chat.message.font_size'
    ]

    try {
      const dbServiceModule = await import('@main/db/DbService')
      const dbService = dbServiceModule.default
      
      for (const key of criticalKeys) {
        const result = await dbService.getPreference('default', key)
        if (result === null) {
          logger.error('关键配置项迁移失败', { key })
          return false
        }
      }

      logger.info('迁移验证成功')
      return true
    } catch (error) {
      logger.error('验证过程中发生错误', error)
      return false
    }
  }
}

// === AUTO-GENERATED CONTENT END ===

/**
 * 生成统计:
 * - 总迁移项: 158
 * - ElectronStore项: 4
 * - Redux项: 154
 */